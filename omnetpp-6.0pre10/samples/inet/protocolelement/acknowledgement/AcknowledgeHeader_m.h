//
// Generated file, do not edit! Created by nedtool 6.0 from inet/protocolelement/acknowledgement/AcknowledgeHeader.msg.
//

#ifndef __INET_ACKNOWLEDGEHEADER_M_H
#define __INET_ACKNOWLEDGEHEADER_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class AcknowledgeHeader;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {

/**
 * Class generated from <tt>inet/protocolelement/acknowledgement/AcknowledgeHeader.msg:24</tt> by nedtool.
 * <pre>
 * class AcknowledgeHeader extends FieldsChunk
 * {
 *     chunkLength = B(4);
 *     int sequenceNumber;
 * }
 * </pre>
 */
class INET_API AcknowledgeHeader : public ::inet::FieldsChunk
{
  protected:
    int sequenceNumber = 0;

  private:
    void copy(const AcknowledgeHeader& other);

  protected:
    bool operator==(const AcknowledgeHeader&) = delete;

  public:
    AcknowledgeHeader();
    AcknowledgeHeader(const AcknowledgeHeader& other);
    virtual ~AcknowledgeHeader();
    AcknowledgeHeader& operator=(const AcknowledgeHeader& other);
    virtual AcknowledgeHeader *dup() const override {return new AcknowledgeHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSequenceNumber() const;
    virtual void setSequenceNumber(int sequenceNumber);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AcknowledgeHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AcknowledgeHeader& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_ACKNOWLEDGEHEADER_M_H

