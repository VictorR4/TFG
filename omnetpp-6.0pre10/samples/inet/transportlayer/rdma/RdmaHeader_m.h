/*
 * RdmaHeader_m.h
 *
 *  Created on: Aug 2, 2021
 *      Author: usuario
 */

#ifndef INET_TRANSPORTLAYER_RDMA_RDMAHEADER_M_H_
#define INET_TRANSPORTLAYER_RDMA_RDMAHEADER_M_H_

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class RdmaHeader;//Cambiado
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/transportlayer/common/CrcMode_m.h" // import inet.transportlayer.common.CrcMode

#include "inet/transportlayer/contract/TransportHeaderBase_m.h" // import inet.transportlayer.contract.TransportHeaderBase

// cplusplus {{
#include "inet/common/INETUtils.h"
// }}


namespace inet {

// cplusplus {{
const B RDMA_HEADER_LENGTH = B(8);//Cambiado
// }}

/**
 * Class generated from <tt>inet/transportlayer/udp/UdpHeader.msg:39</tt> by nedtool.
 * <pre>
 * //
 * // Represents an Udp header, to be used with the ~Udp module.
 * //
 * class UdpHeader extends TransportHeaderBase
 * {
 *     unsigned short srcPort;
 *     unsigned short destPort;
 *     chunkLength = UDP_HEADER_LENGTH;
 *     B totalLengthField = B(-1);   // UDP header + payload in bytes
 *     uint16_t crc \@toString(utils::hex($)) \@fromString(utils::uhex($)) = 0;
 *     CrcMode crcMode = CRC_MODE_UNDEFINED;
 * }
 * </pre>
 */
class INET_API RdmaHeader : public ::inet::TransportHeaderBase //Cambiado
{
  protected:
    unsigned short srcPort = 0;
    unsigned short destPort = 0;
    B totalLengthField = B(-1);
    //Duda: no se sabe si es necesario
    uint16_t crc = 0;
    inet::CrcMode crcMode = CRC_MODE_UNDEFINED;

  private:
    void copy(const RdmaHeader& other);//Cambiado

  protected:
    bool operator==(const RdmaHeader&) = delete;//Cambiado

  public:
    RdmaHeader();//Cambiado
    RdmaHeader(const RdmaHeader& other);//Cambiado
    virtual ~RdmaHeader();//Cambiado
    RdmaHeader& operator=(const RdmaHeader& other);//Cambiado
    virtual RdmaHeader *dup() const override {return new RdmaHeader(*this);}//Cambiado
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned short getSrcPort() const;
    virtual void setSrcPort(unsigned short srcPort);
    virtual unsigned short getDestPort() const;
    virtual void setDestPort(unsigned short destPort);
    virtual B getTotalLengthField() const;
    virtual void setTotalLengthField(B totalLengthField);

    //Duda: creo que no es necesario
    virtual uint16_t getCrc() const;
    virtual void setCrc(uint16_t crc);
    virtual inet::CrcMode getCrcMode() const;
    virtual void setCrcMode(inet::CrcMode crcMode);

  public:
    virtual unsigned int getSourcePort() const override { return getSrcPort(); }
    virtual void setSourcePort(unsigned int port) override { setSrcPort(port); }
    virtual unsigned int getDestinationPort() const override { return getDestPort(); }
    virtual void setDestinationPort(unsigned int port) override { setDestPort(port); }
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RdmaHeader& obj) {obj.parsimPack(b);}//Cambiado
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RdmaHeader& obj) {obj.parsimUnpack(b);}//Cambiado

} // namespace inet





#endif /* INET_TRANSPORTLAYER_RDMA_RDMAHEADER_M_H_ */
